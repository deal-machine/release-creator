name: Create Feature, Bugfix, or Hotfix Branch from Latest Release and Update Version

on:
  workflow_dispatch:
    inputs:
      type:
        description: 'Type of version update: patch, minor, or major'
        required: true
        default: 'patch'
      branch_type:
        description: 'Type of branch: feature, bugfix, or hotfix'
        required: true
        default: 'feature'
permissions:
  contents: write
jobs:
  create-branch-from-latest-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Fetch all release branches
        id: fetch_branches
        run: |
          git fetch --all
          RELEASE_BRANCHES=$(git branch -r | grep 'origin/release/' | sort -V)
          echo "Release branches: $RELEASE_BRANCHES"
          echo "RELEASE_BRANCHES=$RELEASE_BRANCHES" >> $GITHUB_ENV

      - name: Get the latest release version
        id: get_latest_release
        run: |
          # Pega a última release (última versão disponível no repositório)
          LATEST_RELEASE=$(echo "${{ env.RELEASE_BRANCHES }}" | tail -n 1)
          LATEST_VERSION=$(echo $LATEST_RELEASE | sed 's/origin\/release\///')
          echo "Latest release version: $LATEST_VERSION"
          echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_ENV

      - name: Increment version based on input type
        run: |
          # Extraí a versão da release mais recente
          IFS='.' read -r MAJOR MINOR PATCH <<< "${{ env.LATEST_VERSION }}"

          # Incrementa a versão conforme o tipo
          if [[ "${{ inputs.type }}" == "major" ]]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [[ "${{ inputs.type }}" == "minor" ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi

          # Nova versão
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"

          # Atualiza o package.json com a nova versão
          jq --arg version "$NEW_VERSION" '.version = $version' package.json > package.tmp.json
          mv package.tmp.json package.json

          # Commit e push do package.json atualizado
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json
          git commit -m "chore: update version to $NEW_VERSION"
          git push origin HEAD

          git checkout "origin/release/${{ env.LATEST_VERSION }}"
          
          BRANCH_NAME="${{ inputs.branch_type }}/$NEW_VERSION"
          git checkout -b $BRANCH_NAME
          git push origin $BRANCH_NAME
